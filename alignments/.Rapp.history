eigen(trans1)
svd(trans1)
svd(t(trans1))
trans1
?svd
svd(trans1,nu=1)
svd(trans1,nu=1,nv=0)
trans1%*% trans1
trans1%*% trans1%*%trans1
trans1%*% trans1%*%trans1%*%trans1
trans1%*% trans1%*%trans1%*%trans1%*%trans1
eigent(t(trans1))
eigen(t(trans1))
?eigen
eigen(t(trans1))$vectors[,1]->x
x
x %*% trans1
x/sum(x)
freq(wals$data[,1],wals$meta[,"genus"])
svd(t(trans1),nu=1,nv=0)
svd(t(trans1),nu=1,nv=0)$u->y
y/sum(y)
sum(y^2)
feat <- 2#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
library(MASS)#
mds <- isoMDS(as.dist(1-sim))#
plot(mds[[1]],type="n")#
text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
trans <- unlist(transitions(wals$data[,feat],wals$meta[,"genus"])[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)
feat <- 12#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
library(MASS)#
mds <- isoMDS(as.dist(1-sim))#
plot(mds[[1]],type="n")#
text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
trans <- unlist(transitions(wals$data[,feat],wals$meta[,"genus"])[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])
W$attributes[1:20]
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])
stats
feat <- 12#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
stats[3,]
feat <- 1#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
unlist(stats[3,])
W$attributes[1:40]
feat <- 37#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
unlist(stats[3,])
trans1
feat <- 79#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
unlist(stats[3,])
trans1
feat <- 12#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
unlist(stats[3,])
feat <- 2#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
unlist(stats[3,])
W$attributes[1:20]
feat <- 8#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
#
# stability from transitions#
unlist(stats[3,])
table(wals$data[,feat])/sum(table(wals$data[,feat]))
feat <- 10#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
trans1
# feature: vowels (2) is stable, tone (12) is not!#
#
feat <- 12#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
trans1
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
trans <- unlist(stats[1,])#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
feat <- 80#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
feat <- 82#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
feat <- 83#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
feat <- 84#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
feat <- 81#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
feat <- 84#
#
( sim <- round(VV[W$AV[feat,],W$AV[feat,]],digits=2) )#
#
# library(MASS)#
# mds <- isoMDS(as.dist(1-sim))#
# plot(mds[[1]],type="n")#
# text(mds[[1]],labels=1:dim(sim)[1])#
#
# get transitions...#
# note that results are rahter variable (diff of ±0.1 is normal)#
#
stats <- transitions(wals$data[,feat],wals$meta[,"genus"])#
( trans <- unlist(stats[1,]) )#
#
trans1 <- as.matrix(sim)#
diag(trans1) <- 0#
corr <- diag(trans/rowSums(trans1))#
trans1 <- corr %*% trans1#
diag(trans1) <- 1-trans#
trans1#
#
# steady state#
x <- eigen(t(trans1))$vectors[,1]#
x/sum(x)#
#
# compare actual genus-corrected frequencies#
freq(wals$data[,feat],wals$meta[,"genus"])#
# not-genus corrected#
table(wals$data[,feat])/sum(table(wals$data[,feat]))#
# stability from transitions#
unlist(stats[3,])
library(qlcMatrix)
load("~/Desktop/NT.Rdata")#
attach(nt)#
#
examples <- c("anybody", "anyone", "somebody", "someone", "nobody")#
#
examples <- c("mit","with")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}))#
#
a <- which(colSums(WA[w,]) > 5)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
words[TW[10,]][rowSums(WA[TW[10,],a])>0]#
#
table(colSums(WA[w,a]))#
#
# === semantic map#
#
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
getWords <- function(text)#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]][f>0]#
	f <- f[f>0]#
	return(f)#
}#
getWords(10)
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]][f>0]#
	f <- f[f>0]#
	return(f)#
}#
getWords(10)
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(f)#
}#
getWords(10)
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(10)
getWords(20)
getWords(30)
makeM <- function(sel, cased =  FALSE) {#
#
	readMulti <- function(table_file) {#
		read.table(table_file, sep = "\t", quote = "", colClasses= "character")#
	}#
	alignM <- function(table) {#
		ttMatrix(as.numeric(table[,4]))$M#
	}#
	uniqueW <- function(table, cased = cased) {#
		words <- apply(as.matrix(table[,c(1,3)]),1,function(x){paste(x,collapse = "_")})#
		if (!cased) {#
			words <- tolower(words)#
		}#
		return(words)#
	}#
#
	selection <- tables[sel]	#
	alignTables <- sapply(selection, readMulti, simplify = FALSE)#
	alignMatrices <- sapply(alignTables, alignM)#
	wordMatrix <- ttMatrix(unlist(sapply(alignTables, uniqueW)))	#
#
	frequency <- sapply(alignMatrices, dim)[1,]#
	n <- rep.int(1:length(frequency), frequency)#
	VA <- ttMatrix(n)$M	#
	verses <- substr(selection, 1, 8)#
	split <- unlist(strsplit(wordMatrix$rownames, split = "_"))#
	dim(split) <- c(2,length(split)/2)	#
	textsMatrix <- ttMatrix(split[1,])#
#
	WA <- as(wordMatrix$M %*% t(bdiag(alignMatrices)), "nMatrix")#
	return(list(  WA = WA				# words x alignments#
				, TW = textsMatrix$M	# texts x words#
				, AV = t(VA)			# alignments x verses#
				, words = split[2,]#
				, texts = textsMatrix$rownames#
				, verses = verses#
				))#
}#
#
# ============#
#
library(qlcMatrix)#
#
# ============#
#
setwd("/Users/cysouw/Documents/Github/Bible Corpus/tables/")#
tables <- list.files()
system.time(nt <- makeM(20000:20010))
makeM <- function(sel, cased =  FALSE) {#
#
	readMulti <- function(table_file) {#
		read.table(table_file, sep = "\t", quote = "", colClasses= "character")#
	}#
	alignM <- function(table) {#
		ttMatrix(as.numeric(table[,4]))$M#
	}#
	uniqueW <- function(table, cased = FALSE) {#
		words <- apply(as.matrix(table[,c(1,3)]),1,function(x){paste(x,collapse = "_")})#
		if (!cased) {#
			words <- tolower(words)#
		}#
		return(words)#
	}#
#
	selection <- tables[sel]	#
	alignTables <- sapply(selection, readMulti, simplify = FALSE)#
	alignMatrices <- sapply(alignTables, alignM)#
	wordMatrix <- ttMatrix(unlist(sapply(alignTables, uniqueW)))	#
#
	frequency <- sapply(alignMatrices, dim)[1,]#
	n <- rep.int(1:length(frequency), frequency)#
	VA <- ttMatrix(n)$M	#
	verses <- substr(selection, 1, 8)#
	split <- unlist(strsplit(wordMatrix$rownames, split = "_"))#
	dim(split) <- c(2,length(split)/2)	#
	textsMatrix <- ttMatrix(split[1,])#
#
	WA <- as(wordMatrix$M %*% t(bdiag(alignMatrices)), "nMatrix")#
	return(list(  WA = WA				# words x alignments#
				, TW = textsMatrix$M	# texts x words#
				, AV = t(VA)			# alignments x verses#
				, words = split[2,]#
				, texts = textsMatrix$rownames#
				, verses = verses#
				))#
}
system.time(nt <- makeM(20000:20010))
setwd("/Users/cysouw/Documents/Github/Bible Corpus/tables/")#
tables <- list.files()#
empty <- which(sapply(tables,function(x){file.info(x)$size}) == 0)#
tables <- tables[-empty]#
#
system.time(nt <- makeM(19170:35945))#
save(nt, file = "~/Desktop/NT.Rdata")
attach(nt)
examples <- c("mit","with")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}))#
#
a <- which(colSums(WA[w,]) > 5)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(30)#
#
table(colSums(WA[w,a]))
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
examples <- c("wer","wem","wen")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}))
str(w)
a <- which(colSums(WA[w,]) > 2)
str(a)
a <- which(colSums(WA[w,]) > 5)
str(a)
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(30)
table(colSums(WA[w,a]))
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
points(p[which(WA[which(words=="wem")[1],a]),],col="red")
plot(p,col="grey")#
points(p[which(WA[which(words=="wen")[1],a]),],col="red")
points(p[which(WA[which(words=="jeder")[1],a]),],col="red")
plot(p,col="grey")#
points(p[which(WA[which(words=="wer")[1],a]),],col="red")
plot(p,col="grey")
points(p[which(WA[which(words=="whom")[1],a]),],col="red")
getWords(50)
getWords(51)
points(p[which(WA[which(words=="whoever")[1],a]),],col="red")
examples <- c("first")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}))
str(w)
sapply(  examples, function(x) {#
						which(words == x)#
					})
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					})[,1])
w
examples <- c("anybody", "anyone", "somebody", "someone", "nobody")
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					})[,1])
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}))
w
sapply(  examples, function(x) {#
						which(words == x)#
					})
examples <- c("first", "second")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}))#
#
a <- which(colSums(WA[w,]) > 5)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(51)
w
examples <- c("first", "second")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}), simplify=F)
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))
w
examples <- c("first")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))
w
a <- which(colSums(WA[w,]) > 2)
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(51)
str(a)
table(colSums(WA[w,a]))#
#
# === semantic map#
#
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
points(p[which(WA[which(words=="erster")[1],a]),],col="red")
points(p[which(WA[which(words=="ersten")[1],a]),],col="red")
points(p[which(WA[which(words=="firstbordn")[1],a]),],col="red")
points(p[which(WA[which(words=="firstborn")[1],a]),],col="red")
plot(p,col="grey")#
points(p[which(WA[which(words=="firstborn")[1],a]),],col="red")
getWords(1)
getWords(10)
getWords(20)
getWords(30)
getWords(40)
examples <- c("king")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 2)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]
str(a)
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(10)#
#
table(colSums(WA[w,a]))#
#
# === semantic map#
#
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
points(p[which(WA[which(words=="könig")[1],a]),],col="red")
points(p[which(WA[which(words=="könige")[1],a]),],col="blue")
points(p[which(WA[which(words=="königs")[1],a]),],col="blue")
getWords(20)
plot(p,col="grey")#
#
plotWords <- function(text) {#
	sel <- WA[TW[text,],a]#
	f <- rowSums(sel)#
	words <- words[TW[text,]][f>0]#
	sel <- sel[f>0,]#
	cols <- rainbow(length(words))#
	for (i in (1:length(words))[order(f,decreasing=T)]) {#
		points(p[sel[i,],],col=cols[i])#
	}	#
}
plotWords(10)
rainbow(10)
plotWords <- function(text) {#
	sel <- WA[TW[text,],a]#
	f <- rowSums(sel)#
	w <- words[TW[text,]][f>0]#
	sel <- sel[f>0,]#
	cols <- rainbow(length(w))#
	for (i in (1:length(words))[order(f[f>0],decreasing=T)]) {#
		points(p[sel[i,],],col=cols[i])#
	}	#
}
plotWords(10)
plotWords <- function(text) {#
	sel <- WA[TW[text,],a]#
	f <- rowSums(sel)#
	w <- words[TW[text,]][f>0]#
	sel <- sel[f>0,]#
	cols <- rainbow(length(w))#
	for (i in (1:length(words))[order(f[f>0],decreasing=T)]) {#
		points(p[sel[i,],],col=cols[i])#
	}#
	return(words[order(f[f>0],decreasing=T])	#
}
plotWords <- function(text) {#
	plot(p,col="grey")#
	sel <- WA[TW[text,],a]#
	f <- rowSums(sel)#
	w <- words[TW[text,]][f>0]#
	sel <- sel[f>0,]#
	cols <- rainbow(length(w))#
	for (i in (1:length(words))[order(f[f>0],decreasing=T)]) {#
		points(p[sel[i,],],col=cols[i])#
	}#
	return(words[order(f[f>0],decreasing=T)])	#
}
plotWords(10)
plotWords <- function(text) {#
	plot(p,col="grey")#
	sel <- WA[TW[text,],a]#
	f <- rowSums(sel)#
	w <- words[TW[text,]][f>0]#
	sel <- sel[f>0,]#
	cols <- rainbow(length(w))#
	for (i in (1:length(words))[order(f[f>0],decreasing=T)]) {#
		points(p[sel[i,],],col=cols[i])#
	}#
	return(w[order(f[f>0],decreasing=T)])	#
}
plotWords(10)
plotWords(20)
plotWords(30)
plotWords(40)
plotWords(50)
plotWords(60)
plotWords(70)
plotWords(71)
plotWords(1)
plotWords(2)
examples <- c("sklave")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 2)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)#
#
table(colSums(WA[w,a]))#
#
# === semantic map#
#
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
plotWords(1)
str(a)
words[WA[,a[2]]]
sapply(a,function(x){words[WA[,x]]})->tmp
str(tmp)
sapply(a,function(x){words[AV[x,]]})->tmp2
str(tmp2)
sapply(a,function(x){verses[AV[x,]]})->tmp2
str(tmp2)
sapply(a,function(x){texts[(TW%*%WA)[,x]]})->tmp2
str(a)
TA <- TW%*%WA
str(TA)
texts[TA[,a[12]]]
length(texts)
w <- sapply(a,function(x){words[WA[,x]]})#
t <- sapply(a,function(x){texts[TA[,x]]})
all <- c()#
for (i in 1:length(w)) {#
	names(w[i]) <- t[i]#
	all <- cbind(all, w[i][texts])#
}
str(all)
tmp <- w[1]
str(tmp)
names(tmp) <- t[1]
str(tmp)
tmp[1:3]
tmp <- w[[1]]
str(tmp)
names(tmp) <- t[[1]]
str(tmp)
tmp[1:3]
all <- c()#
for (i in 1:length(w)) {#
	names(w[[i]]) <- t[[i]]#
	all <- cbind(all, w[i][texts])#
}
str(all)
dim(all)
all[1:10,1:10]
str(tmp)
tmp <- tmp[texts]
str(tmp)
tmp
all <- c()#
for (i in 1:length(w)) {#
	names(w[[i]]) <- t[[i]]#
	all <- cbind(all, w[[i]][texts])#
}
str(all)
all[1:10,1:10]
write.table(all,"~/Desktop/all.txt",quote=F)
write.table(all,"~/Desktop/all.txt",quote=F,sep="\t")
write.table(all,"~/Desktop/all.txt",quote=F,sep="\t")
table(all)
cog <- c(NA,NA,"angestellt","angestellt","baas","bond","bond","bond",NA,"diener","dienstknecht","dienstknecht","diener","dienstknecht","dienstknecht",NA,NA,NA,NA,"gefangener",NA,"knecht","knecht","knecht",NA,NA,NA,"servant","servant","servant","servant","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave",NA,"diener","diener","diener",NA,"diener","diener","diener","diener","diener","diener","trell","trell","trell","trell","trell","trell","trell","trell",NA,NA,NA,NA,"þjónn","þjónn","trell","trell","trell","trell",NA)
length(cog)
length(table(all))
cbind(names(table(all)),cog)
cog <- c(NA,NA,"angestellt","angestellt","baas","bond","bond","bond",NA,"diener","diener","dienstknecht","dienstknecht","diener","dienstknecht","dienstknecht",NA,NA,NA,NA,"gefangener",NA,"knecht","knecht","knecht",NA,NA,NA,"servant","servant","servant","servant","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave",NA,"diener","diener","diener",NA,"diener","diener","diener","diener","diener","diener","trell","trell","trell","trell","trell","trell","trell","trell",NA,NA,NA,NA,"þjónn","þjónn","trell","trell","trell","trell",NA)
cbind(names(table(all)),cog)
names(cog) <- names(table(all))
for (i in names(table(all))) {#
	all[i] <- cog[i]#
}
str(all)
table(all)
all <- c()#
for (i in 1:length(w)) {#
	names(w[[i]]) <- t[[i]]#
	all <- cbind(all, w[[i]][texts])#
}#
#
table(all)#
cog <- c(NA,NA,"angestellt","angestellt","baas","bond","bond","bond",NA,"diener","diener","dienstknecht","dienstknecht","diener","dienstknecht","dienstknecht",NA,NA,NA,NA,"gefangener",NA,"knecht","knecht","knecht",NA,NA,NA,"servant","servant","servant","servant","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave","sklave",NA,"diener","diener","diener",NA,"diener","diener","diener","diener","diener","diener","trell","trell","trell","trell","trell","trell","trell","trell",NA,NA,NA,NA,"þjónn","þjónn","trell","trell","trell","trell",NA)#
names(cog) <- names(table(all))#
for (i in names(table(all))) {#
	all[all==i] <- cog[i]#
}
str(all)
all[1:10,1:10]
table(all)
?sim.nominal
s <- sim.obs(as.data.frame(all))
str(s)
s[1:10,1:10]
plot(hclust(as.dist(1-sim)))
plot(hclust(as.dist(1-s)))
plot(hclust(as.dist(1-s)),cex=.7)
examples <- c("with")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 2)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)
str(a)
getWords(60)
examples <- c("nach")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 2)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)
str(a)
table(colSums(WA[w,a]))
getWords(60)
a <- which(colSums(WA[w,]) > 3)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)
str(a)
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
plotwords(20)
plotWords(20)
plotWords(50)
plotWords(60)
getWords(60)
examples <- c("house")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 3)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)
str(a)
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
plotWords(20)
plotWords(60)
w <- sapply(a,function(x){words[WA[,x]]})#
t <- sapply(a,function(x){texts[TA[,x]]})#
all <- c()#
for (i in 1:length(w)) {#
	names(w[[i]]) <- t[[i]]#
	all <- cbind(all, w[[i]][texts])#
}#
#
table(all)
str(all)
apply(all,1,function(x){sum(is.na(x))})
str(w)
texts[1:10]
rownames(all) <- texts
apply(all,1,function(x){sum(is.na(x))})
sapply(w,length)
all[1:5,1:5]
dim(all)
all[,1]
examples <- c("table","tables")#
#
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 3)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)#
#
table(colSums(WA[w,a]))
w <- unlist(sapply(  examples, function(x) {#
						which(words == x)#
					}, simplify=F))#
#
a <- which(colSums(WA[w,]) > 1)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)#
#
table(colSums(WA[w,a]))
rowSums(WA[w,a])
rowSums(TA[,a])
s <- cosSparse(WA[,a])#
p <- cmdscale(1-s)#
#
plot(p,col="grey")
plotWords(60)
str(a)
plotWords(1)
plotWords(5)
a <- which(colSums(WA[w,]) > 3)#
#
words[WA[,a[1]]]#
verses[AV[a[1],]]#
#
getWords <- function(text){#
	f <- rowSums(WA[TW[text,],a])#
	names(f) <- words[TW[text,]]#
	f <- f[f>0]#
	return(sort(f,decreasing=T))#
}#
getWords(20)
getWords(60)
